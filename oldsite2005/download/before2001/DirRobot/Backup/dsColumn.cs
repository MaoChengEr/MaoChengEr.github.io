//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DirRobot {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsColumn : DataSet {
        
        private ANclassDataTable tableANclass;
        
        public dsColumn() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsColumn(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["ANclass"] != null)) {
                    this.Tables.Add(new ANclassDataTable(ds.Tables["ANclass"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ANclassDataTable ANclass {
            get {
                return this.tableANclass;
            }
        }
        
        public override DataSet Clone() {
            dsColumn cln = ((dsColumn)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["ANclass"] != null)) {
                this.Tables.Add(new ANclassDataTable(ds.Tables["ANclass"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableANclass = ((ANclassDataTable)(this.Tables["ANclass"]));
            if ((this.tableANclass != null)) {
                this.tableANclass.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsColumn";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsColumn.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableANclass = new ANclassDataTable();
            this.Tables.Add(this.tableANclass);
        }
        
        private bool ShouldSerializeANclass() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ANclassRowChangeEventHandler(object sender, ANclassRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ANclassDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnNclass;
            
            private DataColumn columnlocked;
            
            private DataColumn columnNclassid;
            
            private DataColumn columncontent;
            
            private DataColumn columnorder;
            
            private DataColumn columnrelativePath;
            
            internal ANclassDataTable() : 
                    base("ANclass") {
                this.InitClass();
            }
            
            internal ANclassDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NclassColumn {
                get {
                    return this.columnNclass;
                }
            }
            
            internal DataColumn lockedColumn {
                get {
                    return this.columnlocked;
                }
            }
            
            internal DataColumn NclassidColumn {
                get {
                    return this.columnNclassid;
                }
            }
            
            internal DataColumn contentColumn {
                get {
                    return this.columncontent;
                }
            }
            
            internal DataColumn orderColumn {
                get {
                    return this.columnorder;
                }
            }
            
            internal DataColumn relativePathColumn {
                get {
                    return this.columnrelativePath;
                }
            }
            
            public ANclassRow this[int index] {
                get {
                    return ((ANclassRow)(this.Rows[index]));
                }
            }
            
            public event ANclassRowChangeEventHandler ANclassRowChanged;
            
            public event ANclassRowChangeEventHandler ANclassRowChanging;
            
            public event ANclassRowChangeEventHandler ANclassRowDeleted;
            
            public event ANclassRowChangeEventHandler ANclassRowDeleting;
            
            public void AddANclassRow(ANclassRow row) {
                this.Rows.Add(row);
            }
            
            public ANclassRow AddANclassRow(string Nclass, bool locked, string content, int order, string relativePath) {
                ANclassRow rowANclassRow = ((ANclassRow)(this.NewRow()));
                rowANclassRow.ItemArray = new object[] {
                        Nclass,
                        locked,
                        null,
                        content,
                        order,
                        relativePath};
                this.Rows.Add(rowANclassRow);
                return rowANclassRow;
            }
            
            public ANclassRow FindByNclassid(int Nclassid) {
                return ((ANclassRow)(this.Rows.Find(new object[] {
                            Nclassid})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ANclassDataTable cln = ((ANclassDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ANclassDataTable();
            }
            
            internal void InitVars() {
                this.columnNclass = this.Columns["Nclass"];
                this.columnlocked = this.Columns["locked"];
                this.columnNclassid = this.Columns["Nclassid"];
                this.columncontent = this.Columns["content"];
                this.columnorder = this.Columns["order"];
                this.columnrelativePath = this.Columns["relativePath"];
            }
            
            private void InitClass() {
                this.columnNclass = new DataColumn("Nclass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNclass);
                this.columnlocked = new DataColumn("locked", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnlocked);
                this.columnNclassid = new DataColumn("Nclassid", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNclassid);
                this.columncontent = new DataColumn("content", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncontent);
                this.columnorder = new DataColumn("order", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnorder);
                this.columnrelativePath = new DataColumn("relativePath", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrelativePath);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnNclassid}, true));
                this.columnNclassid.AutoIncrement = true;
                this.columnNclassid.AllowDBNull = false;
                this.columnNclassid.Unique = true;
            }
            
            public ANclassRow NewANclassRow() {
                return ((ANclassRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ANclassRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ANclassRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ANclassRowChanged != null)) {
                    this.ANclassRowChanged(this, new ANclassRowChangeEvent(((ANclassRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ANclassRowChanging != null)) {
                    this.ANclassRowChanging(this, new ANclassRowChangeEvent(((ANclassRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ANclassRowDeleted != null)) {
                    this.ANclassRowDeleted(this, new ANclassRowChangeEvent(((ANclassRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ANclassRowDeleting != null)) {
                    this.ANclassRowDeleting(this, new ANclassRowChangeEvent(((ANclassRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveANclassRow(ANclassRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ANclassRow : DataRow {
            
            private ANclassDataTable tableANclass;
            
            internal ANclassRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableANclass = ((ANclassDataTable)(this.Table));
            }
            
            public string Nclass {
                get {
                    try {
                        return ((string)(this[this.tableANclass.NclassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableANclass.NclassColumn] = value;
                }
            }
            
            public bool locked {
                get {
                    try {
                        return ((bool)(this[this.tableANclass.lockedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableANclass.lockedColumn] = value;
                }
            }
            
            public int Nclassid {
                get {
                    return ((int)(this[this.tableANclass.NclassidColumn]));
                }
                set {
                    this[this.tableANclass.NclassidColumn] = value;
                }
            }
            
            public string content {
                get {
                    try {
                        return ((string)(this[this.tableANclass.contentColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableANclass.contentColumn] = value;
                }
            }
            
            public int order {
                get {
                    try {
                        return ((int)(this[this.tableANclass.orderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableANclass.orderColumn] = value;
                }
            }
            
            public string relativePath {
                get {
                    try {
                        return ((string)(this[this.tableANclass.relativePathColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableANclass.relativePathColumn] = value;
                }
            }
            
            public bool IsNclassNull() {
                return this.IsNull(this.tableANclass.NclassColumn);
            }
            
            public void SetNclassNull() {
                this[this.tableANclass.NclassColumn] = System.Convert.DBNull;
            }
            
            public bool IslockedNull() {
                return this.IsNull(this.tableANclass.lockedColumn);
            }
            
            public void SetlockedNull() {
                this[this.tableANclass.lockedColumn] = System.Convert.DBNull;
            }
            
            public bool IscontentNull() {
                return this.IsNull(this.tableANclass.contentColumn);
            }
            
            public void SetcontentNull() {
                this[this.tableANclass.contentColumn] = System.Convert.DBNull;
            }
            
            public bool IsorderNull() {
                return this.IsNull(this.tableANclass.orderColumn);
            }
            
            public void SetorderNull() {
                this[this.tableANclass.orderColumn] = System.Convert.DBNull;
            }
            
            public bool IsrelativePathNull() {
                return this.IsNull(this.tableANclass.relativePathColumn);
            }
            
            public void SetrelativePathNull() {
                this[this.tableANclass.relativePathColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ANclassRowChangeEvent : EventArgs {
            
            private ANclassRow eventRow;
            
            private DataRowAction eventAction;
            
            public ANclassRowChangeEvent(ANclassRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ANclassRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
